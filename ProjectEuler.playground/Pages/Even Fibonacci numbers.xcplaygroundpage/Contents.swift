//: [Multiples of 3 and 5](@previous)

//: # Even Fibonacci numbers
/*: https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

**By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.**

*/
/*: Attempt 1

func evenFibonacciUpTo(max: Int) -> Int {
    var result = [1, 2]
    var sum = 2
    while result[result.count - 1] < max {
        result.append(result[result.count - 1 ] + result[result.count - 2])
        if result[result.count - 1] % 2 == 0 {
            sum += result[result.count - 1]
        }
    }
    return sum
}


func evenFibonacciUpToWithFilterReduce(max: Int) -> Int {
    var result = [1, 2]
    while result[result.count - 1] < max {
        result.append(result[result.count - 1 ] + result[result.count - 2])
    }
    return result.filter{ $0 % 2 == 0 }.reduce(0, combine: +)
}
*/

//: Attempt 2 (Optimized space complexity per Linus' brain knowledge

extension Int {
    func isEven() -> Bool {
        return self % 2 == 0
    }
}
func evenFibonacciUpTo(max: Int) -> Int {
    var result = [1, 2]
    var sum = 2
    while result.last! < max {
        result.append(result.last! + result.first!)
        result.removeFirst()
        if result.last!.isEven() {
            sum += result.last!
        }
    }
    return sum
}

print(evenFibonacciUpTo(4_000_000))

func evenFibonacciUpToWithFilterReduce(max: Int) -> Int {
    var result = [1, 2]
    while result.last! < max {
        result.append(result[result.count - 1 ] + result[result.count - 2])
    }
    return result.filter{ $0 % 2 == 0 }.reduce(0, combine: +)
}

print(evenFibonacciUpToWithFilterReduce(4_000_000))

//: [Next](@next)
